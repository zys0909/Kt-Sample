apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'walle'
//apply plugin: 'sale-house'


android {
    compileSdkVersion rootProject.ext.compileSdk
    buildToolsVersion rootProject.ext.buildTools
    signingConfigs {
        debug {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file('../debug.keystore')
            storePassword 'android'
        }
    }
    defaultConfig {
        applicationId "com.centa.zhaoys"
        minSdkVersion rootProject.ext.minSdk
        targetSdkVersion rootProject.ext.targetSdk
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField('String', 'BASE_URL', '\"https://www.wanandroid.com\"')
        buildConfigField('Long', 'CONNECT_TIMEOUT', '60000L')
        buildConfigField('Long', 'READ_TIMEOUT', '60000L')

        packagingOptions {
            exclude 'META-INF/*'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            signingConfig signingConfigs.debug
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    walle {
        // 指定渠道包的输出路径
        apkOutputFolder = new File("${project.buildDir}/outputs/channels")
        // 定制渠道包的APK的文件名称
        apkFileNameFormat = '${appName}-${channel}-v${versionName}-${buildTime}.apk'
        // 渠道配置文件
        channelFile = new File("${project.getProjectDir()}/channel")
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = 1.8
    }
    //打包命名
    android.applicationVariants.all { variant ->
        if (variant.buildType.name == 'release') {
            variant.outputs.all {
                def date = new Date().format("yyyyMMdd_HH-mm", TimeZone.getTimeZone("GMT+08"))
                def dir = new File(project.buildDir.absolutePath + "/apk")
                variant.getPackageApplicationProvider().get().outputDirectory = dir
                def variantName = variant.name.replace('Release', '')
                outputFileName = "app-${variantName}-${variant.versionName}-${date}.apk"
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    if (LOCAL_DEBUG) {
//        implementation 'com.github.zys0909:ktx-common:1.0.1-SNAPSHOT'
        implementation project(path: ':common')
    } else {
        implementation 'com.github.zys0909:ktx-common:0.0.1'
    }

    kapt room_kapt
    kapt moshi_kapt
    kapt gilde_kapt
    implementation kotlin_stdlib
    implementation activity_ktx
    implementation fragment_ktx
    implementation material
    implementation constraintlayout
    implementation room_runtime
    implementation lifecycle_viewmodel_ktx
    implementation work_runtime_ktx
    implementation retrofit_moshi
    implementation logging_interceptor
    implementation moshi
    implementation glide_okhttp
    implementation mmkv
    implementation arouter_api
    implementation smart_refresh
    implementation lottie

    implementation 'com.meituan.android.walle:library:1.1.6'
}
task beta(type: Exec) {
    group 'package'
    workingDir "$rootDir/app"
    commandLine './gradlew', 'clean assembleReleaseChannels -PchannelList=baidu'
}
